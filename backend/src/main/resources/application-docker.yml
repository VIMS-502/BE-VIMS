spring:
  application:
    name: vims
  jackson:
    time-zone: Asia/Seoul

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 45842556858-o14hkpalhlk5jqfljr9724qigdbjo6gf.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
  
  # WebSocket Configuration
  websocket:
    cors:
      allowed-origins: "*"
      allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
      allowed-headers: "*"
  
  # Database Configuration (MySQL for production)
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://mysql:3306/vims?serverTimezone=Asia/Seoul}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${SPRING_DATASOURCE_USERNAME:vims}
    password: ${SPRING_DATASOURCE_PASSWORD:vimspass}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
  
  # Redis Configuration for session management
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:redis}
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  mail:
    host: smtp.gmail.com
    port: 587
    username: vimsA502@gmail.com
    password: bmhi vdfp xedj mmxb
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

jwt:
  secret: "ThisIsASecretKeyForvimsProject2025!@#1234567890abcdefghijklmnopqrstuvwxyzQWERTYUIOP"
  expiration: 86400000
  refresh-expiration: 604800000

# Server Configuration
server:
  port: 8080
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# Kurento Media Server Configuration
kurento:
  ws:
    uri: ${KURENTO_WS_URI:ws://kurento:8888/kurento}

# COTURN STUN/TURN Server Configuration
webrtc:
  stun:
    urls: ${WEBRTC_STUN_URLS:stun:coturn:3478}
  turn:
    urls: ${WEBRTC_TURN_URLS:turn:coturn:3478}
    username: ${WEBRTC_TURN_USERNAME:turnuser}
    credential: ${WEBRTC_TURN_CREDENTIAL:turnpass}

# Actuator for health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when-authorized

# Logging Configuration
logging:
  level:
    com.vims: INFO
    org.kurento: WARN
    org.springframework.web.socket: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Google OAuth 설정 (백엔드 코드에서 참조)
google:
  client:
    id: "45842556858-o14hkpalhlk5jqfljr9724qigdbjo6gf.apps.googleusercontent.com" # 구글 클라우드 콘솔에서 발급받은 client_id
  redirect:
    uri: "http://localhost:8080/api/oauth/google/login" # 리다이렉트 URI (백엔드 엔드포인트와 일치)


